#include<stdio.h>
int main(void)
{
	int ret = 0;//到下面发现需要变量在回头设置
	char password[20] = {0};//含义貌似是说password设定20个字符  此处可以赋值password[20]={0} 但亦可不
	printf("请输入密码: \n");//关于（输入缓冲区）程序运行后输入字符会进入输入缓冲区 ★
	scanf("%s", password);//此处的&s代表输入字符串 但是当他遇到空格时会认为读入结束
	getchar();  //此句可以将输入缓冲区中的/n指令取走来避免 /n被下面的getchar()读取★
	printf("请确认（Y/N): ");//输入函数会从输入缓冲区中取走相应字符 此处输入密码后回车键/n会被读取
	ret = getchar();       //从而导致/n被getchar函数取走直接得出结论
    if (ret = 'Y')     //同时可以用代码while（（ch=getchar())!=/n);   来将输入缓冲区里的字符清空更保险★
	{                     //             {                              因为缓冲区最后一个字符为\n
		printf("确认成功\n");  //              ;
	}                           //        }                
	else
		printf("放弃确认\n");
	return 0;
}


#include<stdio.h>
int main(void)
{
	int ch = 0;
	while ((ch = getchar()) != EOF)
	{
		if (ch < '0' || ch > '9')
		continue;
		putchar(ch);
	}
	return 0;
}



编译器的隐式转换
eg   short int a;    int b;   double c;  
进行运算a*b/c时  a会被转化为与b同类型的int型 （a*b）的结果会被转化为与相同的double型
关于scanf 认为输入结束①遇到空格 tab 回车  ②达到输入域宽若写入scanf（%2d%2d,&a,&b）; 一个数据域宽为二直接输入可
                      ③遇到非法的字符输入                
使用scanf用户使用数据分隔符应该与格式控制符分隔符一致
例如scanf(%d-%d,&s,&b); 那么当输入数据时也应输入  数据①-数据② 这样的格式可


#include<stdio.h>
int main(void)
{
	float r,C;
	scanf("%f",&r);
	C = 3.14 * r * r;
	printf("%.2f", C);
	return 0;
}


#include<stdio.h>
#define Π 3.14      //预输入的使用 使Π赋值为3.14在下段中认定
int main(void)
{
	float r, h, V;
	scanf("%f %f", &r, &h);    //此处的各种格式有（"%f-%f"）  ("%f %f")  ("%2f%2f")等的格式可以使用
	V = Π * r * r * h;
	printf("%.2f", V);//中间.2的意思是保留两位小数
	return 0;
}


for循环  for循环是while一种情况简便形式（定义初始化数;判断运行条件;调整变量）
#include <stdio.h>
int main(void)
{
	int i=0;
	for (i = 1; i <= 10; i++)//for循环的初步使用
	{
		if (i == 5)
		break;//break会直接引导往程序结束  Continue结束当前循环开始下一循环
		printf("%d \n", i);
	}
	return 0;
}

#include <stdio.h>
int main(void)
{
	int i = 0;
	for (i = 1; i <= 10; i++)//for循环的初步使用  在for循环体内不要改变循环变量; 
	{
		if (i == 5)
			continue;//此处的continue并不会像while语句一样进入死循环
		printf("%d \n", i);
	}
	return 0;
}


#include<stdio.h>
int main(void)
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10};
	int i = 0;
	for (i = 0; i <10; i++)//for循环循环变量最好使用<>就可不要使用等号;
	{
		printf("%d ", arr[i]);//i从0~9代表了1~10;
	}
}


#include<stdio.h>
int main(void)
{
	for (;;)//此处for循环若没有判断部分则会判断为恒为真 陷入循环
	{
		printf("不，你不热");
	}
	return 0;
}


#include<stdio.h>
int main(void)
{
	int i=1;//开始的初始值
	do      //do while语句的初步使用
	{
		printf("%d ", i);
		i++;
	} while (i <= 10);
	return 0;
}



#include <stdio.h>
int main(void)
{
	int ret=1,i=1;
	int m;
	m = getchar();
	do
	{
		ret = ret * i;
		i++;
	} 
	while (i <= m);
	printf("%d", ret);
	return 0;
}

#include<stdio.h>//计算m！ 
int main(void)
{
	int ret = 1;
	int i = 1;
	int m;
	scanf("%d", &m);
	for (i=1;i<=m;i++)
	{
		ret = ret * i;
	}
	printf("ret=%d ", ret);
	return 0;
}


#include<stdio.h>
int main(void)
{
	int i = 0;
	int n = 0;
	int ret = 1;
	int sum = 0;
	for (n = 1; n <= 4; n++)
	{
		for (i=n; i <= n; i++)
		{
			ret = ret * i;
		}
		sum = sum + ret;
	}
	printf("sum=%d\n", sum);
	return 0;
}


#include<stdio.h>
int main(void)
{
	int i = 0;
	int n = 0;
	int ret = 1;
	int sum = 0;
	for (n = 1; n <= 4; n++)
	{
		ret = 1;      //此式与上面逻辑不同但是产生了一样的结果 可以细品;
		for (i = 1; i <= n; i++)
		{
			ret = ret * i;
		}
		sum = sum + ret;
	}
	printf("sum=%d\n", sum);
	return 0;
}

#include<stdio.h>
int main(void)
{
	int n = 0;
	int ret = 1;
	int sum = 0;
	for (n = 1; n <= 4; n++)//这个代码与上面效果相同 效率更高 这即是算法不同带来的好处 节约处理器性能
	{
			ret = ret * n;
		sum = sum + ret;
	}
	printf("sum=%d\n", sum);
	return 0;
}
用于计算n!

用户输入十个数找最大值
#include<stdio.h>
int main(void)
{
	int max;
	int i = 0;
	int arr[10] = { 0 };//定义数组
	for (i = 0; i < 10; i++)
	{
		scanf("%d", &arr[i]);//用循环来给数组赋值
	}
	max = arr[0];//假设max的值随便一个数组中的数
	for (i = 0; i < 10; i++)//用循环进行一一的对比  使得max最终等于最大的值
	{
		if (max < arr[i])
		{
			max = arr[i];
		}
	}
	printf("最大值为：%d",max);//输出
	return 0;
}


求十个整数的平均数a
#include<stdio.h>
int main(void)
{
	float n;
	float ret=0;
	int i = 0;
	int arr[10] = {0};
	for (i = 0; i < 10; i++)
	{
		scanf("%d", &arr[i]);
	}
	for (i = 0; i < 10; i++)//此处观察上下循环结构差不多好像可以进行合并
	{
		ret = ret + arr[i];
	}
	n = ret / 10;
	printf("%f", n);
	return 0;
}




优化版本 算法优化
#include<stdio.h>
int main(void)
{
	float n;
	float ret = 0;
	int i = 0;
	int arr[10] = { 0 };
	for (i = 0; i < 10; i++)
	{
		scanf("%d", &arr[i]);
		ret = ret + arr[i];
	}

	n = ret / 10;
	printf("%f", n);
	return 0;
}


预测冰箱断电后通过时间t后的温度T; p36
#include<stdio.h>
int main(void)
{
	float t ,min,t;
	int h;
	scanf("%d %f", &h, &min);
	t = h + min / 60;
	t = 4 * t * t / (t + 2) - 20;
	printf("%f", t);
	return 0;
}



输入一个三位数 然后按照数位的逆序打印出这个是数ps：我还挺牛
#include<stdio.h>
int main(void)
{
//	int ret=0;
	printf("请输入一个三位数\n");
	scanf("%d",& ret);
	printf("%d%d%d", ret % 10, (ret%100)/10,ret/100);
	return 0;
}


输入一个十进制的数 将其转化成 八进制和十六进制
在c语言中%d即是输出十进制数%o输出八进制数%x或%X输出十六进制数
#include<stdio.h>
int main(void)
{
	int a = 0;
	scanf("%d", &a);
	printf("%x", a);//若想输出八进制数改为%o
	return 0;
}



//#include<stdio.h>
#include<string.h>
int main(void)
{
	char ret[20];
	int i = 0;
	getchar(ret);//strlen函数用于计算数组中元素的个数
	for (i = 0; i<strlen(ret); i++)
	{
		ret[i] = ret[i] + 4;
	}
	putchar(ret);
	return 0;
}


在有序数组中找到一个数字的下标
#include<stdio.h>
int main(void)
{
	char arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k,i=0;
	scanf("%d", &k);
	int sz = sizeof(arr) / sizeof(arr[0]);
	for (i = 0; i < sz; i++)
	{
		if (k == arr[i])
		{
			printf("找到该数，下标为：%d", i);
			break;
		}
	}
	if (i == sz)
	{
		printf("没找到该数下标\n");
	}
	return 0;
}


#include <stdio.h>
int main(void)
{
	float ret, acc;
	float h, min, s;
	float H, MIN, S;
	scanf("%f%f%f ", &h, &min, &s);
	scanf("%f%f%f", &H, &MIN, &S);
	ret = h + min/60 +s/3600;
	acc = H + MIN/60 + S/3600;
	if (ret < acc)
	{
		printf("时间早：%f 时间晚：%f",ret,acc);
	}
	else
	{
		printf("时间早：%f时 时间晚：%f时", acc,ret);
	}
	return 0;
}
